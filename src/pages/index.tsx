import { wrapper } from "@/libs/store";
import {
  getTodos,
  useGetTodosQuery,
  getRunningQueriesThunk,
  useAddNewTodoMutation,
} from "@/libs/todosApi";
import Head from "next/head";
import React, { useRef, useState } from "react";

export default function Home() {
  const [addNewTodo, response] = useAddNewTodoMutation();

  // Using useRef instead of useState to prevent re-render each time we typing.
  const inputRef = useRef<HTMLInputElement>(null);
  const [page, setPage] = useState<number>(1);

  const { data: todos, isLoading } = useGetTodosQuery(
    `?_start=${page * 10 - 10}&_limit=10`
  );

  // After submitting new todo, all cached data will be re-fetched/revalidated.
  const submitNewTodo = () => {
    if (!inputRef.current?.value) {
      return;
    }

    const newTodo = {
      userId: 1,
      title: inputRef.current!.value,
      completed: false,
    };

    addNewTodo(newTodo)
      .unwrap()
      .then((response) => console.log(response))
      .catch((error) => console.log(error));

    inputRef.current.value = "";
  };

  const handlePagination = (type: "prev" | "next") => {
    switch (type) {
      case "prev":
        if (!(page === 1)) {
          setPage(page - 1);
        }
        break;
      case "next":
        if (!(page === 20)) {
          setPage(page + 1);
        }
        break;
    }
  };

  return (
    <>
      <Head>
        <title>Next - Todo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-wrap min-h-screen py-8 justify-center">
        <div className="block w-full sm:w-[80vw] mx-auto px-4">
          <h1 className="text-4xl font-bold text-center tracking-widest mb-8">
            Next Todos
          </h1>
          <div className="grid grid-cols-[1fr_80px] w-full mb-6 gap-2">
            <input
              // value={todoText}
              ref={inputRef}
              placeholder="Add new task"
              // onChange={(e) => setTodoText(e.target.value)}
              className="px-2 border-b-2 border-blue-500 outline-none"
            />
            <button
              className="bg-blue-500 p-2 text-white rounded"
              onClick={() => submitNewTodo()}
            >
              Submit
            </button>
          </div>
          <div className="flex justify-between mt-4 mb-4">
            <button
              className="w-[80px] bg-blue-500 text-white rounded-l px-2 py-2 disabled:opacity-50"
              onClick={() => handlePagination("prev")}
              disabled={page === 1 ? true : false}
            >
              Prev
            </button>
            <div className="grow bg-blue-500 border-x-2 text-white py-2 text-center">
              Page {page} of 20
            </div>
            <button
              className="w-[80px] bg-blue-500 text-white rounded-r px-2 py-2 disabled:opacity-50"
              onClick={() => handlePagination("next")}
              disabled={page === 20 ? true : false}
            >
              Next
            </button>
          </div>
          {todos && (
            <div className="grid sm:grid-cols-2 gap-4">
              {todos.map((todo, i) => (
                <div
                  key={i}
                  className={`flex flex-col justify-between rounded p-2 ${
                    todo.completed ? "bg-green-500" : "bg-red-500"
                  }`}
                >
                  <span className="font-bold mb-4">{todo.title}</span>
                  <span className="text-sm text-end">
                    {todo.completed ? "Completed" : "Not Completed"}
                  </span>
                </div>
              ))}
            </div>
          )}
          {isLoading && <div>Loading Bruh</div>}
        </div>
      </main>
    </>
  );
}

/**
 * Pre-render initial data with RTK Query and ISR using next-redux-wrapper.
 * Since we want to limit the page to display 10 data per page, we will just initiate the first 10 data.
 * We don't need to return the value because the fetched data will be cached by redux in the server.
 * So, first requested data from client is ready in the server (check network tab in the browser).
 *
 * reference: https://github.com/kirill-konshin/next-redux-wrapper, https://github.com/phryneas/ssr-experiments
 */
export const getStaticProps = wrapper.getStaticProps((store) => async () => {
  await store.dispatch(getTodos.initiate(`?_start=0&_limit=10`));
  await Promise.all(store.dispatch(getRunningQueriesThunk()));

  return {
    props: {},
    revalidate: 10,
  };
});

/** 
 * I got an error when trying to use getServerSideProps (SSR) and ISR together (check this https://github.com/vercel/next.js/issues/35704).
 * But, i think ISR alone should be enough because ISR is a hybrid of SSG and SSR.
 * 
 * */ 
// export const getServerSideProps = wrapper.getServerSideProps((store) => async () => {
//   await store.dispatch(getTodos.initiate(`?_start=0&_limit=10`));
//   await Promise.all(store.dispatch(getRunningQueriesThunk()));

//   return {
//     props: {},
//   };
// });